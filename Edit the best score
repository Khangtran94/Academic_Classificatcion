{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73290,"databundleVersionId":8710574,"sourceType":"competition"},{"sourceId":8642339,"sourceType":"datasetVersion","datasetId":5175917}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport optuna\nfrom optuna.samplers import TPESampler\nfrom sklearn.model_selection import cross_val_score\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import StackingClassifier, GradientBoostingClassifier, VotingClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler, OrdinalEncoder\nfrom sklearn.metrics import accuracy_score, classification_report, f1_score","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:23.624981Z","iopub.execute_input":"2024-06-28T04:48:23.626323Z","iopub.status.idle":"2024-06-28T04:48:23.637377Z","shell.execute_reply.started":"2024-06-28T04:48:23.626273Z","shell.execute_reply":"2024-06-28T04:48:23.635671Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"original_train = pd.read_csv('/kaggle/input/original-dataset-for-pss4e6-from-uci-ml-repo/original.csv', sep = ';')\ncomp_train = pd.read_csv('/kaggle/input/playground-series-s4e6/train.csv') #train dataset from the competition\ntest = pd.read_csv('/kaggle/input/playground-series-s4e6/test.csv')\n\n#some data columns have extra space\noriginal_train.columns = original_train.columns.str.strip()\ncomp_train.columns = comp_train.columns.str.strip()\ntest.columns = test.columns.str.strip()\n\n#drop [id]s\ncomp_train.drop(columns=['id'], inplace=True)\ntest_ids = test['id']\ntest.drop(columns=['id'], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:23.640146Z","iopub.execute_input":"2024-06-28T04:48:23.640653Z","iopub.status.idle":"2024-06-28T04:48:24.1621Z","shell.execute_reply.started":"2024-06-28T04:48:23.64061Z","shell.execute_reply":"2024-06-28T04:48:24.160648Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#combine 2 train datasets together\ntrain = pd.concat([comp_train, original_train])","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.163565Z","iopub.execute_input":"2024-06-28T04:48:24.163919Z","iopub.status.idle":"2024-06-28T04:48:24.179536Z","shell.execute_reply.started":"2024-06-28T04:48:24.16389Z","shell.execute_reply":"2024-06-28T04:48:24.178067Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"data=[]\n\nfor col in train.columns:\n    unique_count = train[col].nunique()\n    data.append({'feature': col, 'unique_count':unique_count})\n\nfeature_count = pd.DataFrame(data)\nfeature_count = feature_count.sort_values(by='unique_count')","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.183661Z","iopub.execute_input":"2024-06-28T04:48:24.184061Z","iopub.status.idle":"2024-06-28T04:48:24.228258Z","shell.execute_reply.started":"2024-06-28T04:48:24.184032Z","shell.execute_reply":"2024-06-28T04:48:24.226875Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"cat_exc = ['Marital status', 'Application mode', 'Course', 'Nacionality', 'Previous qualification', \"Mother's qualification\", \"Mother's occupation\", \"Father's qualification\", \"Father's occupation\"]\n\n#categorical features\ncat_col = [col for col in train.columns if train[col].nunique() <= 8] + cat_exc\n\ncat_col = [col for col in cat_col if col in train.columns]\n\nfor col in cat_col:\n    train[col] = train[col].astype('category')\n    \n    ","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.231972Z","iopub.execute_input":"2024-06-28T04:48:24.23236Z","iopub.status.idle":"2024-06-28T04:48:24.310396Z","shell.execute_reply.started":"2024-06-28T04:48:24.232329Z","shell.execute_reply":"2024-06-28T04:48:24.308729Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Feature Engineering","metadata":{}},{"cell_type":"code","source":"#gender features\ngender_stats = train.groupby('Gender')['Target'].value_counts(normalize=True).unstack()\n\ngender_stats.columns = [f\"Gender_{col}_Rate\" for col in gender_stats.columns] \n\ntrain = train.merge(gender_stats, on='Gender', how='left') \ntest = test.merge(gender_stats, on='Gender', how='left') ","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.312045Z","iopub.execute_input":"2024-06-28T04:48:24.312467Z","iopub.status.idle":"2024-06-28T04:48:24.373968Z","shell.execute_reply.started":"2024-06-28T04:48:24.312433Z","shell.execute_reply":"2024-06-28T04:48:24.372279Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#debtor features\ndebtor_stats = train.groupby('Debtor')['Target'].value_counts(normalize=True).unstack() \ndebtor_stats.columns = [f\"Debtor_{col}_Rate\" for col in debtor_stats.columns] \ntrain = train.merge(debtor_stats, on='Debtor', how='left')\ntest = test.merge(debtor_stats, on='Debtor', how='left')","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.375886Z","iopub.execute_input":"2024-06-28T04:48:24.37631Z","iopub.status.idle":"2024-06-28T04:48:24.441241Z","shell.execute_reply.started":"2024-06-28T04:48:24.376278Z","shell.execute_reply":"2024-06-28T04:48:24.439396Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#scolarship features\nscholarship_stats = train.groupby('Scholarship holder')['Target'].value_counts(normalize=True).unstack() \nscholarship_stats.columns = [f\"Scholarship_{col}_Rate\" for col in scholarship_stats.columns] \ntrain = train.merge(scholarship_stats, on='Scholarship holder', how='left')\ntest = test.merge(scholarship_stats, on='Scholarship holder', how='left')","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.442603Z","iopub.execute_input":"2024-06-28T04:48:24.442972Z","iopub.status.idle":"2024-06-28T04:48:24.509044Z","shell.execute_reply.started":"2024-06-28T04:48:24.442941Z","shell.execute_reply":"2024-06-28T04:48:24.507484Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#age features\n#mean \nmean_age = train['Age at enrollment'].mean() \nmean_age_test = test['Age at enrollment'].mean() \n\n#feature seperate by mean\ntrain['Age_Group'] = (train['Age at enrollment'] > mean_age).astype(int)\ntrain['Age_Interaction'] = train['Age at enrollment'] * train['Age_Group']\n\ntest['Age_Group'] = (test['Age at enrollment'] > mean_age_test).astype(int)\ntest['Age_Interaction'] = test['Age at enrollment'] * test['Age_Group']","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.510898Z","iopub.execute_input":"2024-06-28T04:48:24.511324Z","iopub.status.idle":"2024-06-28T04:48:24.529924Z","shell.execute_reply.started":"2024-06-28T04:48:24.511288Z","shell.execute_reply":"2024-06-28T04:48:24.528324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Curricular units 2nd sem (grade) features\n#mean \nmean_2nd_grade = train['Curricular units 2nd sem (grade)'].mean() \nmean_2nd_grade_test = test['Curricular units 2nd sem (grade)'].mean()\n\n#feature seperate by mean\ntrain['2nd_grade_group'] = (train['Curricular units 2nd sem (grade)'] > mean_2nd_grade).astype(int)\ntrain['2nd_grade_interaction'] = train['Curricular units 2nd sem (grade)'] * train['2nd_grade_group']\n\ntest['2nd_grade_group'] = (test['Curricular units 2nd sem (grade)'] > mean_2nd_grade_test).astype(int)\ntest['2nd_grade_interaction'] = test['Curricular units 2nd sem (grade)'] * test['2nd_grade_group']","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.532056Z","iopub.execute_input":"2024-06-28T04:48:24.532647Z","iopub.status.idle":"2024-06-28T04:48:24.5519Z","shell.execute_reply.started":"2024-06-28T04:48:24.53259Z","shell.execute_reply":"2024-06-28T04:48:24.550154Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Curricular units 2nd sem (approved) features\n#mean\nmean_2nd_app = train['Curricular units 2nd sem (approved)'].mean() \nmean_2nd_app_test = test['Curricular units 2nd sem (approved)'].mean() \n\n#feature seperate by mean\ntrain['2nd_app_group'] = (train['Curricular units 2nd sem (approved)'] > mean_2nd_app).astype(int)\ntrain['2nd_app_interaction'] = train['Curricular units 2nd sem (approved)'] * train['2nd_app_group']\n\ntest['2nd_app_group'] = (test['Curricular units 2nd sem (approved)'] > mean_2nd_app_test).astype(int)\ntest['2nd_app_interaction'] = test['Curricular units 2nd sem (approved)'] * test['2nd_app_group']","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.553983Z","iopub.execute_input":"2024-06-28T04:48:24.554511Z","iopub.status.idle":"2024-06-28T04:48:24.572726Z","shell.execute_reply.started":"2024-06-28T04:48:24.554472Z","shell.execute_reply":"2024-06-28T04:48:24.571201Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Curricular units 1st sem (grade) features\n#mean \nmean_1st_grade = train['Curricular units 1st sem (grade)'].mean() \nmean_1st_grade_test = test['Curricular units 1st sem (grade)'].mean() \n\n#feature seperate by mean\ntrain['1st_grade_group'] = (train['Curricular units 1st sem (grade)'] > mean_1st_grade).astype(int)\ntrain['1st_grade_interaction'] = train['Curricular units 1st sem (grade)'] * train['1st_grade_group']\n\ntest['1st_grade_group'] = (test['Curricular units 1st sem (grade)'] > mean_1st_grade_test).astype(int)\ntest['1st_grade_interaction'] = test['Curricular units 1st sem (grade)'] * test['1st_grade_group']","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.575157Z","iopub.execute_input":"2024-06-28T04:48:24.575647Z","iopub.status.idle":"2024-06-28T04:48:24.59567Z","shell.execute_reply.started":"2024-06-28T04:48:24.575611Z","shell.execute_reply":"2024-06-28T04:48:24.594138Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Curricular units 1st sem (approved) features\n#mean\nmean_1st_app = train['Curricular units 1st sem (approved)'].mean()\nmean_1st_app_test = test['Curricular units 1st sem (approved)'].mean() \n\n\n#feature seperate by mean\ntrain['1st_app_group'] = (train['Curricular units 1st sem (approved)'] > mean_1st_app).astype(int)\ntrain['1st_app_interaction'] = train['Curricular units 1st sem (approved)'] * train['1st_app_group']\n\ntest['1st_app_group'] = (test['Curricular units 1st sem (approved)'] > mean_1st_app_test).astype(int)\ntest['1st_app_interaction'] = test['Curricular units 1st sem (approved)'] * test['1st_app_group']\n\ntrain.head()\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.597914Z","iopub.execute_input":"2024-06-28T04:48:24.598442Z","iopub.status.idle":"2024-06-28T04:48:24.645066Z","shell.execute_reply.started":"2024-06-28T04:48:24.598403Z","shell.execute_reply":"2024-06-28T04:48:24.643499Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Models","metadata":{}},{"cell_type":"code","source":"X = train.drop('Target', axis=1)\ny = train['Target'] \n\n#remove weakest features - from previous iteration\nweakest_features = ['International', 'Educational special needs',\n                    'Daytime/evening attendance', 'Nacionality']\nX.drop(columns=weakest_features, inplace=True)\ntest.drop(columns=weakest_features, inplace=True)\n\n#split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify=y)\n\n#label encoder\nlabel_encoder = LabelEncoder()\ny_train = label_encoder.fit_transform(y_train)\ny_test = label_encoder.transform(y_test)\n\n#transform the ordinal features\nordinal_encoder = OrdinalEncoder(categories=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])\nX_train['Application order'] = ordinal_encoder.fit_transform(X_train[['Application order']])\nX_test['Application order'] = ordinal_encoder.transform(X_test[['Application order']])\ntest['Application order'] = ordinal_encoder.transform(test[['Application order']])\n\n#apply robustscaler\nscaler = RobustScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\ntest_scaled = scaler.transform(test)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:24.654461Z","iopub.execute_input":"2024-06-28T04:48:24.655008Z","iopub.status.idle":"2024-06-28T04:48:25.518574Z","shell.execute_reply.started":"2024-06-28T04:48:24.654964Z","shell.execute_reply":"2024-06-28T04:48:25.516967Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Optuna code\n# the objective functions for each model\ndef objective_catboost(trial):\n    param = {\n        'depth': trial.suggest_int('depth', 4, 10),\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1),\n        'iterations': trial.suggest_int('iterations', 100, 1000),\n    }\n    model = CatBoostClassifier(**param, verbose=0)\n    return cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy').mean()\n\ndef objective_xgboost(trial):\n    param = {\n        'max_depth': trial.suggest_int('max_depth', 3, 10),\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1),\n        'n_estimators': trial.suggest_int('n_estimators', 100, 1000),\n    }\n    model = XGBClassifier(**param)\n    return cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy').mean()\n\ndef objective_lightgbm(trial):\n    param = {\n        'num_leaves': trial.suggest_int('num_leaves', 31, 256),\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1),\n        'n_estimators': trial.suggest_int('n_estimators', 100, 1000),\n    }\n    model = LGBMClassifier(**param)\n    return cross_val_score(model, X_train, y_train, cv=5, scoring='accuracy').mean()\n\n\n# optimize hyperparameters for each model\nstudy_catboost = optuna.create_study(direction='maximize', sampler=TPESampler())\nstudy_catboost.optimize(objective_catboost, n_trials=50)\n\nstudy_xgboost = optuna.create_study(direction='maximize', sampler=TPESampler())\nstudy_xgboost.optimize(objective_xgboost, n_trials=50)\n\nstudy_lightgbm = optuna.create_study(direction='maximize', sampler=TPESampler())\nstudy_lightgbm.optimize(objective_lightgbm, n_trials=50)\n\n# retrieve best hyperparameters\nbest_params_catboost = study_catboost.best_params\nbest_params_xgboost = study_xgboost.best_params\nbest_params_lightgbm = study_lightgbm.best_params","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-24T02:16:17.714347Z","iopub.execute_input":"2024-06-24T02:16:17.714794Z"}}},{"cell_type":"markdown","source":"#print out for later usage\nprint(\"Best LightGBM hyperparameters: \", best_params_lightgbm)\nprint(\"Best XGBoost hyperparameters: \", best_params_xgboost)\nprint(\"Best CatBoost hyperparameters: \", best_params_catboost)","metadata":{}},{"cell_type":"markdown","source":"## Best hyperparameters from previous run\n\nBest LightGBM hyperparameters:  {'num_leaves': 64, 'learning_rate': 0.02002536650717548, 'n_estimators': 872}\n\nBest XGBoost hyperparameters:  {'max_depth': 4, 'learning_rate': 0.08811941392517798, 'n_estimators': 477}\n\nBest CatBoost hyperparameters:  {'depth': 5, 'learning_rate': 0.0933854924734131, 'iterations': 741}","metadata":{}},{"cell_type":"code","source":"#best hyperparameters from previous run\nbest_params_lightgbm = {'num_leaves': 64, 'learning_rate': 0.02002536650717548, 'n_estimators': 872, 'verbose': -1}\nbest_params_xgboost = {'max_depth': 4, 'learning_rate': 0.08811941392517798, 'n_estimators': 477}\nbest_params_catboost = {'depth': 5, 'learning_rate': 0.0933854924734131, 'iterations': 741}\n\n# create base models with best hyperparameters\nbase_model_lightgbm = LGBMClassifier(**best_params_lightgbm)\nbase_model_xgboost = XGBClassifier(**best_params_xgboost)\nbase_model_catboost = CatBoostClassifier(**best_params_catboost, verbose=0)\n\nbase_model_lightgbm.fit(X_train, y_train)\nbase_model_xgboost.fit(X_train, y_train)\nbase_model_catboost.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:48:25.52074Z","iopub.execute_input":"2024-06-28T04:48:25.521377Z","iopub.status.idle":"2024-06-28T04:50:30.856894Z","shell.execute_reply.started":"2024-06-28T04:48:25.521329Z","shell.execute_reply":"2024-06-28T04:50:30.855464Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"base_models = [\n    ('lightgbm', base_model_lightgbm),\n    ('xgboost', base_model_xgboost),\n    ('catboost', base_model_catboost)\n]\nvoting_classifier = VotingClassifier(estimators=base_models, voting='soft')\nvoting_classifier.fit(X_train, y_train)\n\ny_pred = voting_classifier.predict(X_test)\nprint(classification_report(y_test, y_pred))\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred):.4f}\")\nprint(f\"F1-score: {f1_score(y_test, y_pred, average='weighted'):.4f}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:50:30.858795Z","iopub.execute_input":"2024-06-28T04:50:30.859334Z","iopub.status.idle":"2024-06-28T04:52:41.909052Z","shell.execute_reply.started":"2024-06-28T04:50:30.85924Z","shell.execute_reply":"2024-06-28T04:52:41.907313Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_predictions = voting_classifier.predict(test_scaled)\nfinal_predictions = label_encoder.inverse_transform(test_predictions) #Decode predictions to original labels\n\nsubmission = pd.DataFrame({\n    'id': test_ids,\n    'Target': final_predictions\n})\n\n# Save the submission file\nsubmission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T04:52:41.911209Z","iopub.execute_input":"2024-06-28T04:52:41.911682Z","iopub.status.idle":"2024-06-28T04:52:59.987617Z","shell.execute_reply.started":"2024-06-28T04:52:41.911646Z","shell.execute_reply":"2024-06-28T04:52:59.986035Z"},"trusted":true},"execution_count":null,"outputs":[]}]}