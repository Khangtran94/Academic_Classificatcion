{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73290,"databundleVersionId":8710574,"sourceType":"competition"},{"sourceId":8642339,"sourceType":"datasetVersion","datasetId":5175917}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport optuna\nfrom optuna.samplers import TPESampler\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import VotingClassifier, BaggingClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.decomposition import PCA\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, cross_val_predict\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler, OrdinalEncoder, QuantileTransformer,MinMaxScaler, StandardScaler\nfrom sklearn.metrics import accuracy_score, classification_report, f1_score\nimport warnings","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:27.999146Z","iopub.execute_input":"2024-07-02T02:02:27.999668Z","iopub.status.idle":"2024-07-02T02:02:32.831466Z","shell.execute_reply.started":"2024-07-02T02:02:27.999627Z","shell.execute_reply":"2024-07-02T02:02:32.830043Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"warnings.filterwarnings(\"ignore\")","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:32.833704Z","iopub.execute_input":"2024-07-02T02:02:32.834407Z","iopub.status.idle":"2024-07-02T02:02:32.840062Z","shell.execute_reply.started":"2024-07-02T02:02:32.834366Z","shell.execute_reply":"2024-07-02T02:02:32.838843Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"original_train = pd.read_csv('/kaggle/input/original-dataset-for-pss4e6-from-uci-ml-repo/original.csv', sep = ';')\ncomp_train = pd.read_csv('/kaggle/input/playground-series-s4e6/train.csv') #train dataset from the competition\ntest = pd.read_csv('/kaggle/input/playground-series-s4e6/test.csv')\n\n#some data columns have extra space\noriginal_train.columns = original_train.columns.str.strip()\ncomp_train.columns = comp_train.columns.str.strip()\ntest.columns = test.columns.str.strip()\n\n#drop [id]s\ncomp_train.drop(columns=['id'], inplace=True)\ntest_ids = test['id']\ntest.drop(columns=['id'], inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:32.841586Z","iopub.execute_input":"2024-07-02T02:02:32.841970Z","iopub.status.idle":"2024-07-02T02:02:33.499700Z","shell.execute_reply.started":"2024-07-02T02:02:32.841936Z","shell.execute_reply":"2024-07-02T02:02:33.498336Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"#combine 2 train datasets together\ntrain = pd.concat([comp_train, original_train])","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:33.502591Z","iopub.execute_input":"2024-07-02T02:02:33.502948Z","iopub.status.idle":"2024-07-02T02:02:33.519876Z","shell.execute_reply.started":"2024-07-02T02:02:33.502918Z","shell.execute_reply":"2024-07-02T02:02:33.518412Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"# Models","metadata":{}},{"cell_type":"code","source":"X = train.drop('Target', axis=1)\ny = train['Target']","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:33.522172Z","iopub.execute_input":"2024-07-02T02:02:33.522659Z","iopub.status.idle":"2024-07-02T02:02:33.549268Z","shell.execute_reply.started":"2024-07-02T02:02:33.522619Z","shell.execute_reply":"2024-07-02T02:02:33.547794Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# convert categorical features to category dtype\ncat_col = ['Marital status','Application order','Daytime/evening attendance','Displaced','Educational special needs','Debtor','Tuition fees up to date', 'Gender', 'Scholarship holder', 'International', 'Marital status','Application mode', 'Course', 'Nacionality', 'Previous qualification', \"Mother's qualification\", \"Mother's occupation\", \"Father's qualification\", \"Father's occupation\"]\n\nfor col in cat_col:\n    X[col] = X[col].astype('category')\n    test[col] = test[col].astype('category')\n\nX, test = X.align(test, join='left', axis=1, fill_value=0)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:33.551065Z","iopub.execute_input":"2024-07-02T02:02:33.551561Z","iopub.status.idle":"2024-07-02T02:02:33.641533Z","shell.execute_reply.started":"2024-07-02T02:02:33.551520Z","shell.execute_reply":"2024-07-02T02:02:33.640087Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"#split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1,stratify=y)\n\n#label encoder\nlabel_encoder = LabelEncoder()\ny_train = label_encoder.fit_transform(y_train)\ny_test = label_encoder.transform(y_test)\n\n#transform the ordinal features\nordinal_encoder = OrdinalEncoder(categories=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])\nX_train['Application order'] = ordinal_encoder.fit_transform(X_train[['Application order']])\nX_test['Application order'] = ordinal_encoder.transform(X_test[['Application order']])\ntest['Application order'] = ordinal_encoder.transform(test[['Application order']])\n\n#apply robustscaler\nscaler = RobustScaler(with_centering=True, with_scaling=True,quantile_range=(25.0, 75.0),unit_variance=False,copy=True)\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\ntest_scaled = scaler.transform(test)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:33.643639Z","iopub.execute_input":"2024-07-02T02:02:33.644127Z","iopub.status.idle":"2024-07-02T02:02:33.958243Z","shell.execute_reply.started":"2024-07-02T02:02:33.644084Z","shell.execute_reply":"2024-07-02T02:02:33.957093Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"#best hyperparameters from previous run\nbest_params_lightgbm = {'objective': 'multiclass',\n                        'num_class': 3,\n                        'metric': 'multi_logloss',\n                        'boosting_type':'gbdt',\n                        'num_leaves':482,\n                        'min_child_samples':41,\n                        'subsample':0.8025687103592695,\n                        'reg_alpha': 0.6176692573408702,\n                        'reg_lambda':0.7049815778581363,\n                        'learning_rate':0.06191339234853863,\n                        'max_depth':12,\n                        'colsample_bytree':0.4208603637631339,\n                        'random_state': 1,\n                        'verbosity': -1\n                       }\nbest_params_xgboost = {'objective': 'multi:softmax',\n                       'num_class': 3,\n                       'eval_metric': 'mlogloss',\n                       'booster': 'gbtree',\n                       'learning_rate': 0.05,\n                       'reg_alpha': 0.5,\n                       'reg_lambda': 1,\n                       'max_depth': 6,\n                       'min_child_weight': 1,\n                       'subsample': 0.8,\n                       'colsample_bytree': 0.8,\n                       'n_estimators': 500,\n                       'verbosity': 0\n                      }\n\nbest_params_catboost = {'objective': 'MultiClass',\n                        'eval_metric': 'MultiClass',\n                        'random_state': 1,\n                        'learning_rate': 0.09400992289199143,\n                        'n_estimators': 431,\n                        'max_depth': 7,\n                        'colsample_bylevel': 0.5013909676212447,\n                        'reg_lambda': 0.7938308017200595,\n                        'verbose': False\n                       }","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:33.959791Z","iopub.execute_input":"2024-07-02T02:02:33.960300Z","iopub.status.idle":"2024-07-02T02:02:33.969658Z","shell.execute_reply.started":"2024-07-02T02:02:33.960258Z","shell.execute_reply":"2024-07-02T02:02:33.968321Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"#create base models with best hyperparameters\nbase_model_lightgbm = LGBMClassifier(**best_params_lightgbm)\nbase_model_xgboost = XGBClassifier(**best_params_xgboost)\nbase_model_catboost = CatBoostClassifier(**best_params_catboost)\n\nbase_model_lightgbm.fit(X_train, y_train)\nbase_model_xgboost.fit(X_train, y_train)\nbase_model_catboost.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-02T02:02:33.971249Z","iopub.execute_input":"2024-07-02T02:02:33.971609Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"base_models = [\n    ('lightgbm', base_model_lightgbm),\n    ('xgboost', base_model_xgboost),\n    ('catboost', base_model_catboost)\n]\nvoting_classifier = VotingClassifier(estimators=base_models, voting='soft', weights=[3, 2, 1])\n\ncv_results = cross_val_predict(voting_classifier, X_train, y_train, cv=5)\n\nvoting_classifier.fit(X_train, y_train)\n\n#accuracy score and reports\ny_train_pred = voting_classifier.predict(X_train)\n\ny_test_pred = voting_classifier.predict(X_test)\n\nprint(f\"Training Accuracy: {accuracy_score(y_train, y_train_pred):.4f}\")\nprint(f\"Training F1-score: {f1_score(y_train, y_train_pred, average='weighted'):.4f}\")\n\nprint(f\"Test Accuracy: {accuracy_score(y_test, y_test_pred):.4f}\")\nprint(f\"Test F1-score: {f1_score(y_test, y_test_pred, average='weighted'):.4f}\")","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"test_predictions = voting_classifier.predict(test_scaled)\nfinal_predictions = label_encoder.inverse_transform(test_predictions) #Decode predictions to original labels\n\nsubmission = pd.DataFrame({\n    'id': test_ids,\n    'Target': final_predictions\n})\n\n# Save the submission file\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true},"execution_count":null,"outputs":[]}]}